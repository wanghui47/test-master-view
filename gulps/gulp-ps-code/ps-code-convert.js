"use strict";
exports.__esModule = true;
var PsCodeConverter = (function () {
    function PsCodeConverter(options) {
        this.options = options;
        this.options = options ? options : { noComments: true, name: 'powershell-scripts.ts' };
        if (!this.options.hasOwnProperty('noComments')) {
            this.options.noComments = true;
        }
    }
    Object.defineProperty(PsCodeConverter.prototype, "content", {
        get: function () {
            return this.buffer.join('');
        },
        enumerable: true,
        configurable: true
    });
    PsCodeConverter.prototype.contentReset = function () {
        this.buffer = [];
    };
    PsCodeConverter.prototype.generate = function (collection) {
        var tsBase = null;
        this.buffer.push(PsCodeConverter.openContent);
        this.addData(collection);
        this.buffer.push(PsCodeConverter.closeContent);
    };
    PsCodeConverter.prototype.jsonName = function (original) {
        // let name = original[0].toLowerCase() + original.substr(1);
        var name = original;
        name = this.replaceAll(name, '-', '_');
        name = name.substr(0, name.length - 4);
        return name;
    };
    PsCodeConverter.prototype.regexEscape = function (str) {
        return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
    };
    PsCodeConverter.prototype.replaceAll = function (input, searchValue, replaceValue) {
        return input.replace(new RegExp(this.regexEscape(searchValue), 'g'), replaceValue);
    };
    PsCodeConverter.prototype.addToContent = function (name, script, indent) {
        this.buffer.push(this.indent(indent) + 'export const ' + name + ': string = ' + script + ';\n');
    };
    PsCodeConverter.prototype.addData = function (current) {
        var keys = Object.keys(current);
        var _loop_1 = function (key) {
            var script = '';
            var content = current[key];
            var name_1 = this_1.jsonName(key);
            script = '##' + name_1 + '##:' + key + '\n';
            var removeComments = this_1.options.noComments;
            if (content.indexOf(PsCodeConverter.removeCommentsFalse) > 0) {
                removeComments = false;
            }
            else if (content.indexOf(PsCodeConverter.removeCommentsTrue) > 0) {
                removeComments = true;
            }
            var skipping = false;
            var lines = content.split('\r');
            lines.forEach(function (value, index, array) {
                var text = value.replace('\n', '');
                if (removeComments) {
                    var process_1 = true;
                    text = text.trim();
                    if (text.startsWith(PsCodeConverter.commentStart)) {
                        skipping = true;
                    }
                    if (skipping) {
                        process_1 = false;
                        if (text.endsWith(PsCodeConverter.commentEnd)) {
                            skipping = false;
                        }
                    }
                    if (process_1 && !text.startsWith(PsCodeConverter.comment) && text.length > 0) {
                        script += text + '\n';
                    }
                }
                else {
                    script += text + '\n';
                }
            });
            var data = JSON.stringify(script);
            data = this_1.replaceAll(data, '\'', '\\u0027');
            data = this_1.replaceAll(data, '<', '\\u003c');
            data = this_1.replaceAll(data, '>', '\\u003e');
            data = this_1.replaceAll(data, '&', '\\u0026');
            this_1.addToContent(name_1, data, 1);
        };
        var this_1 = this;
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            _loop_1(key);
        }
    };
    PsCodeConverter.prototype.indent = function (count) {
        var pad = '';
        for (var i = 0; i < count; i++) {
            pad += '    ';
        }
        return pad;
    };
    return PsCodeConverter;
}());
PsCodeConverter.removeCommentsTrue = '##RemoveComments=true##';
PsCodeConverter.removeCommentsFalse = '##RemoveComments=false##';
PsCodeConverter.commentStart = '<#';
PsCodeConverter.commentEnd = '#>';
PsCodeConverter.comment = '#';
PsCodeConverter.openContent = "/* tslint:disable */\n/**\n * @file Source code generated by gulp-ps-code.\n * @version 1.0\n */\nexport module PowerShellScripts {\n    'use strict'\n";
PsCodeConverter.closeContent = "}\n";
exports.PsCodeConverter = PsCodeConverter;
