declare function escape(data: string): string;
declare function unescape(data: string): string;

export interface Options {
    noComments: boolean;
    name: string;
}

export class PsCodeConverter {
    private static removeCommentsTrue = '##RemoveComments=true##';
    private static removeCommentsFalse = '##RemoveComments=false##';
    private static commentStart = '<#';
    private static commentEnd = '#>';
    private static comment = '#';
    private static openContent =
`/* tslint:disable */
/**
 * @file Source code generated by gulp-ps-code.
 * @version 1.0
 */
export module PowerShellScripts {
    'use strict'
`;
    private static closeContent =
`}
`;
    private buffer: string[];

    constructor(private options?: Options) {
        this.options = options ? options : { noComments: true, name: 'powershell-scripts.ts' };
        if (!this.options.hasOwnProperty('noComments')) {
            this.options.noComments = true;
        }
    }

    public get content(): string {
        return this.buffer.join('');
    }

    public contentReset(): void {
        this.buffer = [];
    }

    public generate(collection: { [index: string]: string }): void {
        let tsBase = null;
        this.buffer.push(PsCodeConverter.openContent);
        this.addData(collection);
        this.buffer.push(PsCodeConverter.closeContent);
    }

    private jsonName (original: string): string {
        // let name = original[0].toLowerCase() + original.substr(1);
        let name = original;
        name = this.replaceAll(name, '-', '_');
        name = name.substr(0, name.length - 4);
        return name;
    }

    private regexEscape(str: string): string {
        return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
    }

    private replaceAll(input: string, searchValue: string, replaceValue: string): string {
        return input.replace(new RegExp(this.regexEscape(searchValue), 'g'), replaceValue);
    }

    private addToContent(name: string, script: string, indent: number): void {
        this.buffer.push(this.indent(indent) + 'export const ' + name + ': string = ' + script + ';\n');
    }

    private addData(current: { [index: string]: string }): void {
        let keys = Object.keys(current);
        for (let key of keys) {
            let script = '';
            let content: string = current[key];
            let name = this.jsonName(key);
            script = '##' + name + '##:' + key + '\n';
            let removeComments = this.options.noComments;
            if (content.indexOf(PsCodeConverter.removeCommentsFalse) > 0) {
                removeComments = false;
            } else if (content.indexOf(PsCodeConverter.removeCommentsTrue) > 0) {
                removeComments = true;
            }

            let skipping = false;
            let lines = content.split('\r');
            lines.forEach((value, index, array) => {
                let text = value.replace('\n', '');
                if (removeComments) {
                    let process = true;
                    text = text.trim();
                    if (text.startsWith(PsCodeConverter.commentStart)) {
                        skipping = true;
                    }

                    if (skipping) {
                        process = false;
                        if (text.endsWith(PsCodeConverter.commentEnd)) {
                            skipping = false;
                        }
                    }

                    if (process && !text.startsWith(PsCodeConverter.comment) && text.length > 0) {
                        script += text + '\n';
                    }
                } else {
                    script += text + '\n';
                }

            });
            let data = JSON.stringify(script);
            data = this.replaceAll(data, '\'', '\\u0027');
            data = this.replaceAll(data, '<', '\\u003c');
            data = this.replaceAll(data, '>', '\\u003e');
            data = this.replaceAll(data, '&', '\\u0026');
            this.addToContent(name, data, 1);
        }
    }

    private indent(count: number): string {
        let pad = '';
        for (let i = 0; i < count; i++) {
            pad += '    ';
        }

        return pad;
    }
}